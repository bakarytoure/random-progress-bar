{"version":3,"sources":["ProgressBar.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","props","bgcolor","completed","title","color","greaterorless","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","transition","className","style","marginTop","App","React","useState","setCompleted","useEffect","setInterval","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPA+CeA,G,kBA7CK,SAACC,GAAW,IACtBC,EAAoDD,EAApDC,QAASC,EAA2CF,EAA3CE,UAAWC,EAAgCH,EAAhCG,MAAOC,EAAyBJ,EAAzBI,MAAOC,EAAkBL,EAAlBK,cAUpCC,EAAe,CACnBC,OAAQ,OACRC,MAAM,GAAD,OAAKN,EAAL,KACLO,gBAAiBR,EACjBS,aAAc,UACdC,UAAW,QACXC,WAAY,wBAUd,OACE,yBAAKC,UAAU,+BACb,wBAAIA,UAAU,QACXV,EADH,IACU,0BAAMW,MAAO,CAAEV,UAAf,cAA6BF,EAA7B,MACR,gCACE,0BAAMY,MAAO,CAAEV,UAAUC,KAI7B,yBAAKS,MAlCe,CACtBP,OAAQ,GACRC,MAAO,OACPC,gBAAiB,UACjBC,aAAc,GACdK,UAAW,KA8BP,yBAAKD,MAAOR,QCHLU,MA9Bf,WAAgB,IAAD,EACqBC,IAAMC,SAAS,IADpC,mBACNhB,EADM,KACKiB,EADL,KAOb,OALAF,IAAMG,WAAU,WAGdC,aAAY,kBAAMF,EAAaG,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,KAAI,OACpE,IAED,yBAAKX,UAAU,QACZX,EAAY,GACX,kBAAC,EAAD,CACED,QAAQ,MACRC,UAAWA,EACXC,MAAM,uCACNC,MAAM,MACNC,cAAc,yCAGhB,kBAAC,EAAD,CACEJ,QAAQ,QACRC,UAAWA,EACXC,MAAM,sBACNC,MAAM,QACNC,cAAc,8CCjBJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a7a7f8c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ProgressBar = (props) => {\n  const { bgcolor, completed, title, color, greaterorless } = props;\n  const containerStyles = {\n    height: 19,\n    width: \"100%\",\n    backgroundColor: \"#e0e0de\",\n    borderRadius: 50,\n    marginTop: 10,\n    //marginBottom: 20,\n  };\n\n  const fillerStyles = {\n    height: \"100%\",\n    width: `${completed}%`,\n    backgroundColor: bgcolor,\n    borderRadius: \"inherit\",\n    textAlign: \"right\",\n    transition: \"width 1s ease-in-out\",\n  };\n\n  const labelStyles = {\n    //padding: 5,\n    paddingBottom: 2,\n    color: \"white\",\n    //fontWeight: \"bold\",\n  };\n\n  return (\n    <div className=\"container mx-auto mt-5 pt-5\">\n      <h4 className=\"mb-0\">\n        {title} <span style={{ color }}> {`${completed}%`}</span>\n        <strong>\n          <span style={{ color }}>{greaterorless}</span>\n        </strong>\n      </h4>\n\n      <div style={containerStyles}>\n        <div style={fillerStyles}>\n          {/* <span style={labelStyles}>{`${completed}%`}</span>*/}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React from \"react\";\nimport \"./App.scss\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Picker } from \"emoji-mart\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction App() {\n  const [completed, setCompleted] = React.useState(60);\n  React.useEffect(() => {\n    //setInterval(() => setCompleted(75), 1000);\n\n    setInterval(() => setCompleted(Math.floor(Math.random() * 100) + 1), 4000);\n  }, []);\n  return (\n    <div className=\"App \">\n      {completed < 50 ? (\n        <ProgressBar\n          bgcolor=\"red\"\n          completed={completed}\n          title=\"Please do better next time! You got \"\n          color=\"Red\"\n          greaterorless=\" which is less than the everage 50%.\"\n        />\n      ) : (\n        <ProgressBar\n          bgcolor=\"green\"\n          completed={completed}\n          title=\"Great job! You got \"\n          color=\"green\"\n          greaterorless=\" which is greater than the average 50%.\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}